# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
USER=whoami

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"
# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi


source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

#################################
# Config                       
#################################

## NVM
export NVM_DIR=~/.nvm
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

## Pyenv 

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"

# pnpm
export PNPM_HOME="/Users/pit/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end


#################################
# Aliases                       
#################################

alias docker-clean-images="docker rmi $(docker images -a --filter=dangling=true -q)"
alias docker-clean-ps="docker rm $(docker ps --filter=status=exited --filter=status=created -q)"
alias docker-clean-all="docker kill $(docker ps -q);docker_clean_ps;docker rmi $(docker images -a -q)"
alias get-linux="ls -1 /boot/vmlinuz-*"
alias vscode="codium"
alias openzs="open ~/.zshrc"
alias sourcezs="source ~/.zshrc"
alias p="python3"
alias home="cd $HOME"
alias goserver="$HOME/.goserver/main"
alias k="kubectl"
alias mk="minikube"
alias mount-data="sudo cryptsetup luksOpen /dev/sda5 data && sudo mount /dev/mapper/data /home/$USER/data/"
alias convert-png-to-jpg="mogrify -format jpg *.png"
alias stack-imgs-vert="convert -append *.jpg stacked-image.jpg"
alias stack-imgs-hori="convert +append *.jpg stacked-image.jpg"
alias obs="flatpak run com.obsproject.Studio"

#################################
# Variables
#################################

export PATH="$PATH:/usr/local/go/bin"
export FLYCTL_INSTALL="/home/$USER/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"
export GOPATH="$HOME/go"
export PATH="$PATH:$GOPATH/bin"
export DENO_INSTALL="/home/$USER/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"
export PATH="/home/$USER/.codon/bin:$PATH"
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin $PATH"

#################################
# param alias 
#################################

clean-audio() {
    ffmpeg -i $1 -af "highpass=f=200, lowpass=f=3000" $2
}

square-image() {
    convert $1 -resize 1420x1080 -background black -gravity center -extent 1420x1420 $2
}

subtitle() {
    ffmpeg -i $1 -vf "subtitles=$2" $3
}

resize-to() {
    mogrify -resize $1x *.*
}

convert-wav-to-mp3() {
    ffmpeg -i $1 -vn -ar 44100 -ac 2 -b:a 192k $2
}

subtitle-center() {
	ffmpeg -i $1 -vf "subtitles=$2:force_style='Fontsize=12,Alignment=10,Outline=0,BorderStyle=4,BackColour=&H30000000,PrimaryColour=&HFFFFFF'" $3
}

subtitle-center-ass() {
	ffmpeg -i $1 -vf "subtitles=$2" $3
}

convert-to-webp() {
	for file in *.jpg; do cwebp $file -o $file.webp; done;
	for file in *.png; do cwebp $file -o $file.webp; done;
}

subtitle-lower-yellow() {
	ffmpeg -i $1 -vf "subtitles=$2:force_style='FontName=UKIJ Chechek,Fontsize=16,PrimaryColour=&H00FFFF&,OutlineColour=&H000000&,Outline=2,Alignment=2,MarginV=80'" -c:v libx264 -crf 23 -preset medium -c:a copy $3
}

resize-video-to-mb() {
	# Usage: ./resize_video.sh input_video target_size_mb
	# Example: ./resize_video.sh input.mp4 10

	# Get input parameters
	input_file="$1"
	target_size_mb="$2"

	if [ -z "$input_file" ] || [ -z "$target_size_mb" ]; then
	    echo "Usage: $0 input_video target_size_mb"
	    exit 1
	fi

	# Check if input file exists
	if [ ! -f "$input_file" ]; then
	    echo "Input file does not exist: $input_file"
	    exit 1
	fi

	# Get file extension
	extension="${input_file##*.}"
	filename="${input_file%.*}"
	output_file="${filename}_${target_size_mb}mb.${extension}"

	# Calculate target size in bits (1 MB = 8,000,000 bits, accounting for some overhead)
	target_size_bits=$((target_size_mb * 8000000))

	# Get video duration in seconds
	duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$input_file")
	duration=$(printf "%.0f" "$duration")

	# Calculate target bitrate (bits per second)
	target_bitrate=$((target_size_bits / duration))

	# Calculate audio bitrate (assuming 128k audio, adjust as needed)
	audio_bitrate=128000

	# Adjust video bitrate to account for audio
	video_bitrate=$((target_bitrate - audio_bitrate))

	# Ensure video bitrate doesn't go too low
	if [ $video_bitrate -lt 100000 ]; then
	    echo "Warning: Target size may be too small for this video length. Using minimum bitrate."
	    video_bitrate=100000
	fi

	echo "Processing video to target size of $target_size_mb MB..."
	echo "Video bitrate: $((video_bitrate / 1000)) kbps"
	echo "Audio bitrate: $((audio_bitrate / 1000)) kbps"

	# Create a temporary directory for pass logfiles
	mkdir -p /tmp/ffmpeg2pass

	# Perform the conversion with improved settings
	ffmpeg -y -i "$input_file" -c:v libx264 -b:v "$video_bitrate" -maxrate "$((video_bitrate * 2))" \
	    -bufsize "$((video_bitrate * 4))" -preset medium -pass 1 -an \
	    -f null -passlogfile /tmp/ffmpeg2pass/passlog /dev/null

	if [ $? -ne 0 ]; then
	    echo "First pass failed!"
	    rm -rf /tmp/ffmpeg2pass
	    exit 1
	fi

	ffmpeg -y -i "$input_file" -c:v libx264 -b:v "$video_bitrate" -maxrate "$((video_bitrate * 2))" \
	    -bufsize "$((video_bitrate * 4))" -preset medium -pass 2 \
	    -c:a aac -b:a "$audio_bitrate" -passlogfile /tmp/ffmpeg2pass/passlog \
	    -movflags +faststart "$output_file"

	if [ $? -ne 0 ]; then
	    echo "Second pass failed!"
	    rm -rf /tmp/ffmpeg2pass
	    exit 1
	fi

	# Clean up temporary files
	rm -rf /tmp/ffmpeg2pass

	# Verify final size
	final_size=$(du -m "$output_file" | cut -f1)
	echo "Final file size: $final_size MB (target was $target_size_mb MB)"

}
 

source '/home/eduardo/.nvm/versions/node/v18.17.0/lib/node_modules/@hyperupcall/autoenv/activate.sh'
source '/home/eduardo/.nvm/versions/node/v18.17.0/lib/node_modules/@hyperupcall/autoenv/activate.sh'

#################################
# plugins                       
#################################

source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

plugins=(
    autoenv
    colorize
    python
    pyenv
    pyenv-virtualenv
    zsh-syntax-highlighting
    zsh-interactive-cd
    zsh-autosuggestions
    )

eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# bun completions
[ -s "/home/$USER/.bun/_bun" ] && source "/home/$USER/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

. "$HOME/.cargo/env"
. "/home/$USER/.deno/env"